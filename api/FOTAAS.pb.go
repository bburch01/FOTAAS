// Code generated by protoc-gen-go. DO NOT EDIT.
// source: FOTAAS.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Track int32

const (
	Track_AUSTIN                   Track = 0
	Track_BAKU                     Track = 1
	Track_CATALUNYA_BARCELONA      Track = 2
	Track_HOCKENHEIM               Track = 3
	Track_HUNGARORING              Track = 4
	Track_INTERLAGOS_SAU_PAULO     Track = 5
	Track_MARINA_BAY               Track = 6
	Track_MELBOURNE                Track = 7
	Track_MEXICO_CITY              Track = 8
	Track_MONTE_CARLO              Track = 9
	Track_MONTREAL                 Track = 10
	Track_MONZA                    Track = 11
	Track_PAUL_RICARD_LE_CASTELLET Track = 12
	Track_SAKHIR                   Track = 13
	Track_SHANGHAI                 Track = 14
	Track_SILVERSTONE              Track = 15
	Track_SOCHI                    Track = 16
	Track_SPA_FRANCORCHAMPS        Track = 17
	Track_SPIELBERG_RED_BULL_RING  Track = 18
	Track_SUZUKA                   Track = 19
	Track_YAS_MARINA               Track = 20
)

var Track_name = map[int32]string{
	0:  "AUSTIN",
	1:  "BAKU",
	2:  "CATALUNYA_BARCELONA",
	3:  "HOCKENHEIM",
	4:  "HUNGARORING",
	5:  "INTERLAGOS_SAU_PAULO",
	6:  "MARINA_BAY",
	7:  "MELBOURNE",
	8:  "MEXICO_CITY",
	9:  "MONTE_CARLO",
	10: "MONTREAL",
	11: "MONZA",
	12: "PAUL_RICARD_LE_CASTELLET",
	13: "SAKHIR",
	14: "SHANGHAI",
	15: "SILVERSTONE",
	16: "SOCHI",
	17: "SPA_FRANCORCHAMPS",
	18: "SPIELBERG_RED_BULL_RING",
	19: "SUZUKA",
	20: "YAS_MARINA",
}
var Track_value = map[string]int32{
	"AUSTIN":                   0,
	"BAKU":                     1,
	"CATALUNYA_BARCELONA":      2,
	"HOCKENHEIM":               3,
	"HUNGARORING":              4,
	"INTERLAGOS_SAU_PAULO":     5,
	"MARINA_BAY":               6,
	"MELBOURNE":                7,
	"MEXICO_CITY":              8,
	"MONTE_CARLO":              9,
	"MONTREAL":                 10,
	"MONZA":                    11,
	"PAUL_RICARD_LE_CASTELLET": 12,
	"SAKHIR":                   13,
	"SHANGHAI":                 14,
	"SILVERSTONE":              15,
	"SOCHI":                    16,
	"SPA_FRANCORCHAMPS":        17,
	"SPIELBERG_RED_BULL_RING":  18,
	"SUZUKA":                   19,
	"YAS_MARINA":               20,
}

func (x Track) String() string {
	return proto.EnumName(Track_name, int32(x))
}
func (Track) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{0}
}

type GranPrix int32

const (
	GranPrix_UNITED_STATES GranPrix = 0
	GranPrix_AZERBAIJAN    GranPrix = 1
	GranPrix_SPANISH       GranPrix = 2
	GranPrix_GERMAN        GranPrix = 3
	GranPrix_HUNGARIAN     GranPrix = 4
	GranPrix_BRAZILIAN     GranPrix = 5
	GranPrix_SINGAPORE     GranPrix = 6
	GranPrix_AUSTRALIAN    GranPrix = 7
	GranPrix_MEXICAN       GranPrix = 8
	GranPrix_MONACO        GranPrix = 9
	GranPrix_CANADIAN      GranPrix = 10
	GranPrix_ITALIAN       GranPrix = 11
	GranPrix_FRENCH        GranPrix = 12
	GranPrix_BAHRAIN       GranPrix = 13
	GranPrix_CHINESE       GranPrix = 14
	GranPrix_BRITISH       GranPrix = 15
	GranPrix_RUSSIAN       GranPrix = 16
	GranPrix_BELGIAN       GranPrix = 17
	GranPrix_AUSTRIAN      GranPrix = 18
	GranPrix_JAPANESE      GranPrix = 19
	GranPrix_ABU_DHABI     GranPrix = 20
)

var GranPrix_name = map[int32]string{
	0:  "UNITED_STATES",
	1:  "AZERBAIJAN",
	2:  "SPANISH",
	3:  "GERMAN",
	4:  "HUNGARIAN",
	5:  "BRAZILIAN",
	6:  "SINGAPORE",
	7:  "AUSTRALIAN",
	8:  "MEXICAN",
	9:  "MONACO",
	10: "CANADIAN",
	11: "ITALIAN",
	12: "FRENCH",
	13: "BAHRAIN",
	14: "CHINESE",
	15: "BRITISH",
	16: "RUSSIAN",
	17: "BELGIAN",
	18: "AUSTRIAN",
	19: "JAPANESE",
	20: "ABU_DHABI",
}
var GranPrix_value = map[string]int32{
	"UNITED_STATES": 0,
	"AZERBAIJAN":    1,
	"SPANISH":       2,
	"GERMAN":        3,
	"HUNGARIAN":     4,
	"BRAZILIAN":     5,
	"SINGAPORE":     6,
	"AUSTRALIAN":    7,
	"MEXICAN":       8,
	"MONACO":        9,
	"CANADIAN":      10,
	"ITALIAN":       11,
	"FRENCH":        12,
	"BAHRAIN":       13,
	"CHINESE":       14,
	"BRITISH":       15,
	"RUSSIAN":       16,
	"BELGIAN":       17,
	"AUSTRIAN":      18,
	"JAPANESE":      19,
	"ABU_DHABI":     20,
}

func (x GranPrix) String() string {
	return proto.EnumName(GranPrix_name, int32(x))
}
func (GranPrix) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{1}
}

type Constructor int32

const (
	Constructor_ALPHA_ROMEO        Constructor = 0
	Constructor_FERRARI            Constructor = 1
	Constructor_HAAS               Constructor = 2
	Constructor_MCLAREN            Constructor = 3
	Constructor_MERCEDES           Constructor = 4
	Constructor_RACING_POINT       Constructor = 5
	Constructor_RED_BULL_RACING    Constructor = 6
	Constructor_SCUDERIA_TORO_ROSO Constructor = 7
	Constructor_WILLIAMS           Constructor = 8
)

var Constructor_name = map[int32]string{
	0: "ALPHA_ROMEO",
	1: "FERRARI",
	2: "HAAS",
	3: "MCLAREN",
	4: "MERCEDES",
	5: "RACING_POINT",
	6: "RED_BULL_RACING",
	7: "SCUDERIA_TORO_ROSO",
	8: "WILLIAMS",
}
var Constructor_value = map[string]int32{
	"ALPHA_ROMEO":        0,
	"FERRARI":            1,
	"HAAS":               2,
	"MCLAREN":            3,
	"MERCEDES":           4,
	"RACING_POINT":       5,
	"RED_BULL_RACING":    6,
	"SCUDERIA_TORO_ROSO": 7,
	"WILLIAMS":           8,
}

func (x Constructor) String() string {
	return proto.EnumName(Constructor_name, int32(x))
}
func (Constructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{2}
}

type TelemetryDatumUnit int32

const (
	TelemetryDatumUnit_G              TelemetryDatumUnit = 0
	TelemetryDatumUnit_KG_PER_HOUR    TelemetryDatumUnit = 1
	TelemetryDatumUnit_DEGREE_CELCIUS TelemetryDatumUnit = 2
	TelemetryDatumUnit_MJ             TelemetryDatumUnit = 3
	TelemetryDatumUnit_JPS            TelemetryDatumUnit = 4
	TelemetryDatumUnit_RPM            TelemetryDatumUnit = 5
	TelemetryDatumUnit_BAR            TelemetryDatumUnit = 6
	TelemetryDatumUnit_KG             TelemetryDatumUnit = 7
	TelemetryDatumUnit_KPH            TelemetryDatumUnit = 8
	TelemetryDatumUnit_METER          TelemetryDatumUnit = 9
	TelemetryDatumUnit_RADIAN         TelemetryDatumUnit = 10
	TelemetryDatumUnit_KPA            TelemetryDatumUnit = 11
)

var TelemetryDatumUnit_name = map[int32]string{
	0:  "G",
	1:  "KG_PER_HOUR",
	2:  "DEGREE_CELCIUS",
	3:  "MJ",
	4:  "JPS",
	5:  "RPM",
	6:  "BAR",
	7:  "KG",
	8:  "KPH",
	9:  "METER",
	10: "RADIAN",
	11: "KPA",
}
var TelemetryDatumUnit_value = map[string]int32{
	"G":              0,
	"KG_PER_HOUR":    1,
	"DEGREE_CELCIUS": 2,
	"MJ":             3,
	"JPS":            4,
	"RPM":            5,
	"BAR":            6,
	"KG":             7,
	"KPH":            8,
	"METER":          9,
	"RADIAN":         10,
	"KPA":            11,
}

func (x TelemetryDatumUnit) String() string {
	return proto.EnumName(TelemetryDatumUnit_name, int32(x))
}
func (TelemetryDatumUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{3}
}

type TelemetryDatumDescription int32

const (
	TelemetryDatumDescription_G_FORCE              TelemetryDatumDescription = 0
	TelemetryDatumDescription_G_FORCE_DIRECTION    TelemetryDatumDescription = 1
	TelemetryDatumDescription_FUEL_CONSUMED        TelemetryDatumDescription = 2
	TelemetryDatumDescription_FUEL_FLOW            TelemetryDatumDescription = 3
	TelemetryDatumDescription_ENGINE_COOLANT_TEMP  TelemetryDatumDescription = 4
	TelemetryDatumDescription_ENGINE_OIL_PRESSURE  TelemetryDatumDescription = 5
	TelemetryDatumDescription_ENGINE_OIL_TEMP      TelemetryDatumDescription = 6
	TelemetryDatumDescription_ENGINE_RPM           TelemetryDatumDescription = 7
	TelemetryDatumDescription_BRAKE_TEMP_FR        TelemetryDatumDescription = 8
	TelemetryDatumDescription_BRAKE_TEMP_FL        TelemetryDatumDescription = 9
	TelemetryDatumDescription_BRAKE_TEMP_RR        TelemetryDatumDescription = 10
	TelemetryDatumDescription_BRAKE_TEMP_RL        TelemetryDatumDescription = 11
	TelemetryDatumDescription_ENERGY_STORAGE_LEVEL TelemetryDatumDescription = 12
	TelemetryDatumDescription_ENERGY_STORAGE_TEMP  TelemetryDatumDescription = 13
	TelemetryDatumDescription_MGUK_OUTPUT          TelemetryDatumDescription = 14
	TelemetryDatumDescription_MGUH_OUTPUT          TelemetryDatumDescription = 15
	TelemetryDatumDescription_SPEED                TelemetryDatumDescription = 16
	TelemetryDatumDescription_TIRE_PRESSURE_FR     TelemetryDatumDescription = 17
	TelemetryDatumDescription_TIRE_PRESSURE_FL     TelemetryDatumDescription = 18
	TelemetryDatumDescription_TIRE_PRESSURE_RR     TelemetryDatumDescription = 19
	TelemetryDatumDescription_TIRE_PRESSURE_RL     TelemetryDatumDescription = 20
	TelemetryDatumDescription_TIRE_TEMP_FR         TelemetryDatumDescription = 21
	TelemetryDatumDescription_TIRE_TEMP_FL         TelemetryDatumDescription = 22
	TelemetryDatumDescription_TIRE_TEMP_RR         TelemetryDatumDescription = 23
	TelemetryDatumDescription_TIRE_TEMP_RL         TelemetryDatumDescription = 24
)

var TelemetryDatumDescription_name = map[int32]string{
	0:  "G_FORCE",
	1:  "G_FORCE_DIRECTION",
	2:  "FUEL_CONSUMED",
	3:  "FUEL_FLOW",
	4:  "ENGINE_COOLANT_TEMP",
	5:  "ENGINE_OIL_PRESSURE",
	6:  "ENGINE_OIL_TEMP",
	7:  "ENGINE_RPM",
	8:  "BRAKE_TEMP_FR",
	9:  "BRAKE_TEMP_FL",
	10: "BRAKE_TEMP_RR",
	11: "BRAKE_TEMP_RL",
	12: "ENERGY_STORAGE_LEVEL",
	13: "ENERGY_STORAGE_TEMP",
	14: "MGUK_OUTPUT",
	15: "MGUH_OUTPUT",
	16: "SPEED",
	17: "TIRE_PRESSURE_FR",
	18: "TIRE_PRESSURE_FL",
	19: "TIRE_PRESSURE_RR",
	20: "TIRE_PRESSURE_RL",
	21: "TIRE_TEMP_FR",
	22: "TIRE_TEMP_FL",
	23: "TIRE_TEMP_RR",
	24: "TIRE_TEMP_RL",
}
var TelemetryDatumDescription_value = map[string]int32{
	"G_FORCE":              0,
	"G_FORCE_DIRECTION":    1,
	"FUEL_CONSUMED":        2,
	"FUEL_FLOW":            3,
	"ENGINE_COOLANT_TEMP":  4,
	"ENGINE_OIL_PRESSURE":  5,
	"ENGINE_OIL_TEMP":      6,
	"ENGINE_RPM":           7,
	"BRAKE_TEMP_FR":        8,
	"BRAKE_TEMP_FL":        9,
	"BRAKE_TEMP_RR":        10,
	"BRAKE_TEMP_RL":        11,
	"ENERGY_STORAGE_LEVEL": 12,
	"ENERGY_STORAGE_TEMP":  13,
	"MGUK_OUTPUT":          14,
	"MGUH_OUTPUT":          15,
	"SPEED":                16,
	"TIRE_PRESSURE_FR":     17,
	"TIRE_PRESSURE_FL":     18,
	"TIRE_PRESSURE_RR":     19,
	"TIRE_PRESSURE_RL":     20,
	"TIRE_TEMP_FR":         21,
	"TIRE_TEMP_FL":         22,
	"TIRE_TEMP_RR":         23,
	"TIRE_TEMP_RL":         24,
}

func (x TelemetryDatumDescription) String() string {
	return proto.EnumName(TelemetryDatumDescription_name, int32(x))
}
func (TelemetryDatumDescription) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{4}
}

type StatusCode int32

const (
	StatusCode_OK    StatusCode = 0
	StatusCode_ERROR StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var StatusCode_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{5}
}

type SimulationRateMultiplier int32

const (
	SimulationRateMultiplier_X1  SimulationRateMultiplier = 0
	SimulationRateMultiplier_X2  SimulationRateMultiplier = 1
	SimulationRateMultiplier_X4  SimulationRateMultiplier = 2
	SimulationRateMultiplier_X8  SimulationRateMultiplier = 3
	SimulationRateMultiplier_X10 SimulationRateMultiplier = 4
	SimulationRateMultiplier_X20 SimulationRateMultiplier = 5
)

var SimulationRateMultiplier_name = map[int32]string{
	0: "X1",
	1: "X2",
	2: "X4",
	3: "X8",
	4: "X10",
	5: "X20",
}
var SimulationRateMultiplier_value = map[string]int32{
	"X1":  0,
	"X2":  1,
	"X4":  2,
	"X8":  3,
	"X10": 4,
	"X20": 5,
}

func (x SimulationRateMultiplier) String() string {
	return proto.EnumName(SimulationRateMultiplier_name, int32(x))
}
func (SimulationRateMultiplier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{6}
}

type SampleRate int32

const (
	SampleRate_SR_1_MS    SampleRate = 0
	SampleRate_SR_10_MS   SampleRate = 1
	SampleRate_SR_100_MS  SampleRate = 2
	SampleRate_SR_1000_MS SampleRate = 3
)

var SampleRate_name = map[int32]string{
	0: "SR_1_MS",
	1: "SR_10_MS",
	2: "SR_100_MS",
	3: "SR_1000_MS",
}
var SampleRate_value = map[string]int32{
	"SR_1_MS":    0,
	"SR_10_MS":   1,
	"SR_100_MS":  2,
	"SR_1000_MS": 3,
}

func (x SampleRate) String() string {
	return proto.EnumName(SampleRate_name, int32(x))
}
func (SampleRate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{7}
}

type ServerStatus struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.StatusCode" json:"code,omitempty"`
	Message              string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ServerStatus) Reset()         { *m = ServerStatus{} }
func (m *ServerStatus) String() string { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()    {}
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{0}
}
func (m *ServerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerStatus.Unmarshal(m, b)
}
func (m *ServerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerStatus.Marshal(b, m, deterministic)
}
func (dst *ServerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStatus.Merge(dst, src)
}
func (m *ServerStatus) XXX_Size() int {
	return xxx_messageInfo_ServerStatus.Size(m)
}
func (m *ServerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStatus proto.InternalMessageInfo

func (m *ServerStatus) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_OK
}

func (m *ServerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthCheckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{1}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (dst *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(dst, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	ServerStatus         *ServerStatus `protobuf:"bytes,1,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{2}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (dst *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(dst, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetServerStatus() *ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

type TelemetryDatum struct {
	Uuid                             string                    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Description                      TelemetryDatumDescription `protobuf:"varint,2,opt,name=description,proto3,enum=api.TelemetryDatumDescription" json:"description,omitempty"`
	Unit                             TelemetryDatumUnit        `protobuf:"varint,3,opt,name=unit,proto3,enum=api.TelemetryDatumUnit" json:"unit,omitempty"`
	Timestamp                        *timestamp.Timestamp      `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Latitude                         float64                   `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                        float64                   `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Elevation                        float64                   `protobuf:"fixed64,7,opt,name=elevation,proto3" json:"elevation,omitempty"`
	Value                            float64                   `protobuf:"fixed64,8,opt,name=value,proto3" json:"value,omitempty"`
	HighAlarm                        bool                      `protobuf:"varint,9,opt,name=high_alarm,json=highAlarm,proto3" json:"high_alarm,omitempty"`
	LowAlarm                         bool                      `protobuf:"varint,10,opt,name=low_alarm,json=lowAlarm,proto3" json:"low_alarm,omitempty"`
	Simulated                        bool                      `protobuf:"varint,11,opt,name=simulated,proto3" json:"simulated,omitempty"`
	SimulationUuid                   string                    `protobuf:"bytes,12,opt,name=simulation_uuid,json=simulationUuid,proto3" json:"simulation_uuid,omitempty"`
	SimulationTransmitSequenceNumber int32                     `protobuf:"varint,13,opt,name=simulation_transmit_sequence_number,json=simulationTransmitSequenceNumber,proto3" json:"simulation_transmit_sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                  `json:"-"`
	XXX_unrecognized                 []byte                    `json:"-"`
	XXX_sizecache                    int32                     `json:"-"`
}

func (m *TelemetryDatum) Reset()         { *m = TelemetryDatum{} }
func (m *TelemetryDatum) String() string { return proto.CompactTextString(m) }
func (*TelemetryDatum) ProtoMessage()    {}
func (*TelemetryDatum) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{3}
}
func (m *TelemetryDatum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryDatum.Unmarshal(m, b)
}
func (m *TelemetryDatum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryDatum.Marshal(b, m, deterministic)
}
func (dst *TelemetryDatum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryDatum.Merge(dst, src)
}
func (m *TelemetryDatum) XXX_Size() int {
	return xxx_messageInfo_TelemetryDatum.Size(m)
}
func (m *TelemetryDatum) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryDatum.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryDatum proto.InternalMessageInfo

func (m *TelemetryDatum) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *TelemetryDatum) GetDescription() TelemetryDatumDescription {
	if m != nil {
		return m.Description
	}
	return TelemetryDatumDescription_G_FORCE
}

func (m *TelemetryDatum) GetUnit() TelemetryDatumUnit {
	if m != nil {
		return m.Unit
	}
	return TelemetryDatumUnit_G
}

func (m *TelemetryDatum) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TelemetryDatum) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *TelemetryDatum) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *TelemetryDatum) GetElevation() float64 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *TelemetryDatum) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TelemetryDatum) GetHighAlarm() bool {
	if m != nil {
		return m.HighAlarm
	}
	return false
}

func (m *TelemetryDatum) GetLowAlarm() bool {
	if m != nil {
		return m.LowAlarm
	}
	return false
}

func (m *TelemetryDatum) GetSimulated() bool {
	if m != nil {
		return m.Simulated
	}
	return false
}

func (m *TelemetryDatum) GetSimulationUuid() string {
	if m != nil {
		return m.SimulationUuid
	}
	return ""
}

func (m *TelemetryDatum) GetSimulationTransmitSequenceNumber() int32 {
	if m != nil {
		return m.SimulationTransmitSequenceNumber
	}
	return 0
}

type TelemetryData struct {
	GranPrix             GranPrix                   `protobuf:"varint,1,opt,name=gran_prix,json=granPrix,proto3,enum=api.GranPrix" json:"gran_prix,omitempty"`
	Track                Track                      `protobuf:"varint,2,opt,name=track,proto3,enum=api.Track" json:"track,omitempty"`
	Constructor          Constructor                `protobuf:"varint,3,opt,name=constructor,proto3,enum=api.Constructor" json:"constructor,omitempty"`
	CarNumber            int32                      `protobuf:"varint,4,opt,name=car_number,json=carNumber,proto3" json:"car_number,omitempty"`
	TelemetryDatumMap    map[string]*TelemetryDatum `protobuf:"bytes,5,rep,name=telemetry_datum_map,json=telemetryDatumMap,proto3" json:"telemetry_datum_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TelemetryData) Reset()         { *m = TelemetryData{} }
func (m *TelemetryData) String() string { return proto.CompactTextString(m) }
func (*TelemetryData) ProtoMessage()    {}
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{4}
}
func (m *TelemetryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryData.Unmarshal(m, b)
}
func (m *TelemetryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryData.Marshal(b, m, deterministic)
}
func (dst *TelemetryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryData.Merge(dst, src)
}
func (m *TelemetryData) XXX_Size() int {
	return xxx_messageInfo_TelemetryData.Size(m)
}
func (m *TelemetryData) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryData.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryData proto.InternalMessageInfo

func (m *TelemetryData) GetGranPrix() GranPrix {
	if m != nil {
		return m.GranPrix
	}
	return GranPrix_UNITED_STATES
}

func (m *TelemetryData) GetTrack() Track {
	if m != nil {
		return m.Track
	}
	return Track_AUSTIN
}

func (m *TelemetryData) GetConstructor() Constructor {
	if m != nil {
		return m.Constructor
	}
	return Constructor_ALPHA_ROMEO
}

func (m *TelemetryData) GetCarNumber() int32 {
	if m != nil {
		return m.CarNumber
	}
	return 0
}

func (m *TelemetryData) GetTelemetryDatumMap() map[string]*TelemetryDatum {
	if m != nil {
		return m.TelemetryDatumMap
	}
	return nil
}

type SimulationMember struct {
	Uuid                 string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SimulationUuid       string      `protobuf:"bytes,2,opt,name=simulation_uuid,json=simulationUuid,proto3" json:"simulation_uuid,omitempty"`
	Constructor          Constructor `protobuf:"varint,3,opt,name=constructor,proto3,enum=api.Constructor" json:"constructor,omitempty"`
	CarNumber            int32       `protobuf:"varint,4,opt,name=car_number,json=carNumber,proto3" json:"car_number,omitempty"`
	ForceAlarm           bool        `protobuf:"varint,5,opt,name=force_alarm,json=forceAlarm,proto3" json:"force_alarm,omitempty"`
	NoAlarms             bool        `protobuf:"varint,6,opt,name=no_alarms,json=noAlarms,proto3" json:"no_alarms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SimulationMember) Reset()         { *m = SimulationMember{} }
func (m *SimulationMember) String() string { return proto.CompactTextString(m) }
func (*SimulationMember) ProtoMessage()    {}
func (*SimulationMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{5}
}
func (m *SimulationMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimulationMember.Unmarshal(m, b)
}
func (m *SimulationMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimulationMember.Marshal(b, m, deterministic)
}
func (dst *SimulationMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulationMember.Merge(dst, src)
}
func (m *SimulationMember) XXX_Size() int {
	return xxx_messageInfo_SimulationMember.Size(m)
}
func (m *SimulationMember) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulationMember.DiscardUnknown(m)
}

var xxx_messageInfo_SimulationMember proto.InternalMessageInfo

func (m *SimulationMember) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SimulationMember) GetSimulationUuid() string {
	if m != nil {
		return m.SimulationUuid
	}
	return ""
}

func (m *SimulationMember) GetConstructor() Constructor {
	if m != nil {
		return m.Constructor
	}
	return Constructor_ALPHA_ROMEO
}

func (m *SimulationMember) GetCarNumber() int32 {
	if m != nil {
		return m.CarNumber
	}
	return 0
}

func (m *SimulationMember) GetForceAlarm() bool {
	if m != nil {
		return m.ForceAlarm
	}
	return false
}

func (m *SimulationMember) GetNoAlarms() bool {
	if m != nil {
		return m.NoAlarms
	}
	return false
}

type Simulation struct {
	Uuid                     string                       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DurationInMinutes        int32                        `protobuf:"varint,2,opt,name=duration_in_minutes,json=durationInMinutes,proto3" json:"duration_in_minutes,omitempty"`
	SampleRate               SampleRate                   `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3,enum=api.SampleRate" json:"sample_rate,omitempty"`
	SimulationRateMultiplier SimulationRateMultiplier     `protobuf:"varint,4,opt,name=simulation_rate_multiplier,json=simulationRateMultiplier,proto3,enum=api.SimulationRateMultiplier" json:"simulation_rate_multiplier,omitempty"`
	GranPrix                 GranPrix                     `protobuf:"varint,5,opt,name=gran_prix,json=granPrix,proto3,enum=api.GranPrix" json:"gran_prix,omitempty"`
	Track                    Track                        `protobuf:"varint,6,opt,name=track,proto3,enum=api.Track" json:"track,omitempty"`
	SimulationMemberMap      map[string]*SimulationMember `protobuf:"bytes,7,rep,name=simulation_member_map,json=simulationMemberMap,proto3" json:"simulation_member_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral     struct{}                     `json:"-"`
	XXX_unrecognized         []byte                       `json:"-"`
	XXX_sizecache            int32                        `json:"-"`
}

func (m *Simulation) Reset()         { *m = Simulation{} }
func (m *Simulation) String() string { return proto.CompactTextString(m) }
func (*Simulation) ProtoMessage()    {}
func (*Simulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{6}
}
func (m *Simulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Simulation.Unmarshal(m, b)
}
func (m *Simulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Simulation.Marshal(b, m, deterministic)
}
func (dst *Simulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Simulation.Merge(dst, src)
}
func (m *Simulation) XXX_Size() int {
	return xxx_messageInfo_Simulation.Size(m)
}
func (m *Simulation) XXX_DiscardUnknown() {
	xxx_messageInfo_Simulation.DiscardUnknown(m)
}

var xxx_messageInfo_Simulation proto.InternalMessageInfo

func (m *Simulation) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Simulation) GetDurationInMinutes() int32 {
	if m != nil {
		return m.DurationInMinutes
	}
	return 0
}

func (m *Simulation) GetSampleRate() SampleRate {
	if m != nil {
		return m.SampleRate
	}
	return SampleRate_SR_1_MS
}

func (m *Simulation) GetSimulationRateMultiplier() SimulationRateMultiplier {
	if m != nil {
		return m.SimulationRateMultiplier
	}
	return SimulationRateMultiplier_X1
}

func (m *Simulation) GetGranPrix() GranPrix {
	if m != nil {
		return m.GranPrix
	}
	return GranPrix_UNITED_STATES
}

func (m *Simulation) GetTrack() Track {
	if m != nil {
		return m.Track
	}
	return Track_AUSTIN
}

func (m *Simulation) GetSimulationMemberMap() map[string]*SimulationMember {
	if m != nil {
		return m.SimulationMemberMap
	}
	return nil
}

type TransmitTelemetryRequest struct {
	TelemetryData        *TelemetryData `protobuf:"bytes,1,opt,name=telemetry_data,json=telemetryData,proto3" json:"telemetry_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TransmitTelemetryRequest) Reset()         { *m = TransmitTelemetryRequest{} }
func (m *TransmitTelemetryRequest) String() string { return proto.CompactTextString(m) }
func (*TransmitTelemetryRequest) ProtoMessage()    {}
func (*TransmitTelemetryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{7}
}
func (m *TransmitTelemetryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransmitTelemetryRequest.Unmarshal(m, b)
}
func (m *TransmitTelemetryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransmitTelemetryRequest.Marshal(b, m, deterministic)
}
func (dst *TransmitTelemetryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransmitTelemetryRequest.Merge(dst, src)
}
func (m *TransmitTelemetryRequest) XXX_Size() int {
	return xxx_messageInfo_TransmitTelemetryRequest.Size(m)
}
func (m *TransmitTelemetryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransmitTelemetryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransmitTelemetryRequest proto.InternalMessageInfo

func (m *TransmitTelemetryRequest) GetTelemetryData() *TelemetryData {
	if m != nil {
		return m.TelemetryData
	}
	return nil
}

type TransmitTelemetryResponse struct {
	ServerStatus         map[string]*ServerStatus `protobuf:"bytes,1,rep,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TransmitTelemetryResponse) Reset()         { *m = TransmitTelemetryResponse{} }
func (m *TransmitTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*TransmitTelemetryResponse) ProtoMessage()    {}
func (*TransmitTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{8}
}
func (m *TransmitTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransmitTelemetryResponse.Unmarshal(m, b)
}
func (m *TransmitTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransmitTelemetryResponse.Marshal(b, m, deterministic)
}
func (dst *TransmitTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransmitTelemetryResponse.Merge(dst, src)
}
func (m *TransmitTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_TransmitTelemetryResponse.Size(m)
}
func (m *TransmitTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransmitTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransmitTelemetryResponse proto.InternalMessageInfo

func (m *TransmitTelemetryResponse) GetServerStatus() map[string]*ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

type RunSimulationRequest struct {
	Simulation           *Simulation `protobuf:"bytes,1,opt,name=simulation,proto3" json:"simulation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RunSimulationRequest) Reset()         { *m = RunSimulationRequest{} }
func (m *RunSimulationRequest) String() string { return proto.CompactTextString(m) }
func (*RunSimulationRequest) ProtoMessage()    {}
func (*RunSimulationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{9}
}
func (m *RunSimulationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunSimulationRequest.Unmarshal(m, b)
}
func (m *RunSimulationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunSimulationRequest.Marshal(b, m, deterministic)
}
func (dst *RunSimulationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunSimulationRequest.Merge(dst, src)
}
func (m *RunSimulationRequest) XXX_Size() int {
	return xxx_messageInfo_RunSimulationRequest.Size(m)
}
func (m *RunSimulationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunSimulationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunSimulationRequest proto.InternalMessageInfo

func (m *RunSimulationRequest) GetSimulation() *Simulation {
	if m != nil {
		return m.Simulation
	}
	return nil
}

type RunSimulationResponse struct {
	ServerStatus         *ServerStatus `protobuf:"bytes,1,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RunSimulationResponse) Reset()         { *m = RunSimulationResponse{} }
func (m *RunSimulationResponse) String() string { return proto.CompactTextString(m) }
func (*RunSimulationResponse) ProtoMessage()    {}
func (*RunSimulationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{10}
}
func (m *RunSimulationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunSimulationResponse.Unmarshal(m, b)
}
func (m *RunSimulationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunSimulationResponse.Marshal(b, m, deterministic)
}
func (dst *RunSimulationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunSimulationResponse.Merge(dst, src)
}
func (m *RunSimulationResponse) XXX_Size() int {
	return xxx_messageInfo_RunSimulationResponse.Size(m)
}
func (m *RunSimulationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunSimulationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunSimulationResponse proto.InternalMessageInfo

func (m *RunSimulationResponse) GetServerStatus() *ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

type GetSimulationStatusRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSimulationStatusRequest) Reset()         { *m = GetSimulationStatusRequest{} }
func (m *GetSimulationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetSimulationStatusRequest) ProtoMessage()    {}
func (*GetSimulationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{11}
}
func (m *GetSimulationStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSimulationStatusRequest.Unmarshal(m, b)
}
func (m *GetSimulationStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSimulationStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GetSimulationStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSimulationStatusRequest.Merge(dst, src)
}
func (m *GetSimulationStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetSimulationStatusRequest.Size(m)
}
func (m *GetSimulationStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSimulationStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSimulationStatusRequest proto.InternalMessageInfo

func (m *GetSimulationStatusRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type GetSimulationStatusResponse struct {
	ServerStatus         *ServerStatus `protobuf:"bytes,1,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetSimulationStatusResponse) Reset()         { *m = GetSimulationStatusResponse{} }
func (m *GetSimulationStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetSimulationStatusResponse) ProtoMessage()    {}
func (*GetSimulationStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{12}
}
func (m *GetSimulationStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSimulationStatusResponse.Unmarshal(m, b)
}
func (m *GetSimulationStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSimulationStatusResponse.Marshal(b, m, deterministic)
}
func (dst *GetSimulationStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSimulationStatusResponse.Merge(dst, src)
}
func (m *GetSimulationStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetSimulationStatusResponse.Size(m)
}
func (m *GetSimulationStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSimulationStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSimulationStatusResponse proto.InternalMessageInfo

func (m *GetSimulationStatusResponse) GetServerStatus() *ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

type GetTelemetryDataRequest struct {
	DateRangeBegin       *timestamp.Timestamp      `protobuf:"bytes,1,opt,name=date_range_begin,json=dateRangeBegin,proto3" json:"date_range_begin,omitempty"`
	DateRangeEnd         *timestamp.Timestamp      `protobuf:"bytes,2,opt,name=date_range_end,json=dateRangeEnd,proto3" json:"date_range_end,omitempty"`
	GranPrix             GranPrix                  `protobuf:"varint,3,opt,name=gran_prix,json=granPrix,proto3,enum=api.GranPrix" json:"gran_prix,omitempty"`
	Track                Track                     `protobuf:"varint,4,opt,name=track,proto3,enum=api.Track" json:"track,omitempty"`
	Constructor          Constructor               `protobuf:"varint,5,opt,name=constructor,proto3,enum=api.Constructor" json:"constructor,omitempty"`
	CarNumber            int32                     `protobuf:"varint,6,opt,name=car_number,json=carNumber,proto3" json:"car_number,omitempty"`
	DatumDescription     TelemetryDatumDescription `protobuf:"varint,7,opt,name=datum_description,json=datumDescription,proto3,enum=api.TelemetryDatumDescription" json:"datum_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetTelemetryDataRequest) Reset()         { *m = GetTelemetryDataRequest{} }
func (m *GetTelemetryDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetTelemetryDataRequest) ProtoMessage()    {}
func (*GetTelemetryDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{13}
}
func (m *GetTelemetryDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTelemetryDataRequest.Unmarshal(m, b)
}
func (m *GetTelemetryDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTelemetryDataRequest.Marshal(b, m, deterministic)
}
func (dst *GetTelemetryDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTelemetryDataRequest.Merge(dst, src)
}
func (m *GetTelemetryDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetTelemetryDataRequest.Size(m)
}
func (m *GetTelemetryDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTelemetryDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTelemetryDataRequest proto.InternalMessageInfo

func (m *GetTelemetryDataRequest) GetDateRangeBegin() *timestamp.Timestamp {
	if m != nil {
		return m.DateRangeBegin
	}
	return nil
}

func (m *GetTelemetryDataRequest) GetDateRangeEnd() *timestamp.Timestamp {
	if m != nil {
		return m.DateRangeEnd
	}
	return nil
}

func (m *GetTelemetryDataRequest) GetGranPrix() GranPrix {
	if m != nil {
		return m.GranPrix
	}
	return GranPrix_UNITED_STATES
}

func (m *GetTelemetryDataRequest) GetTrack() Track {
	if m != nil {
		return m.Track
	}
	return Track_AUSTIN
}

func (m *GetTelemetryDataRequest) GetConstructor() Constructor {
	if m != nil {
		return m.Constructor
	}
	return Constructor_ALPHA_ROMEO
}

func (m *GetTelemetryDataRequest) GetCarNumber() int32 {
	if m != nil {
		return m.CarNumber
	}
	return 0
}

func (m *GetTelemetryDataRequest) GetDatumDescription() TelemetryDatumDescription {
	if m != nil {
		return m.DatumDescription
	}
	return TelemetryDatumDescription_G_FORCE
}

type GetTelemetryDataResponse struct {
	ServerStatus         *ServerStatus  `protobuf:"bytes,1,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	TelemetryData        *TelemetryData `protobuf:"bytes,2,opt,name=telemetry_data,json=telemetryData,proto3" json:"telemetry_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetTelemetryDataResponse) Reset()         { *m = GetTelemetryDataResponse{} }
func (m *GetTelemetryDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetTelemetryDataResponse) ProtoMessage()    {}
func (*GetTelemetryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{14}
}
func (m *GetTelemetryDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTelemetryDataResponse.Unmarshal(m, b)
}
func (m *GetTelemetryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTelemetryDataResponse.Marshal(b, m, deterministic)
}
func (dst *GetTelemetryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTelemetryDataResponse.Merge(dst, src)
}
func (m *GetTelemetryDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetTelemetryDataResponse.Size(m)
}
func (m *GetTelemetryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTelemetryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTelemetryDataResponse proto.InternalMessageInfo

func (m *GetTelemetryDataResponse) GetServerStatus() *ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

func (m *GetTelemetryDataResponse) GetTelemetryData() *TelemetryData {
	if m != nil {
		return m.TelemetryData
	}
	return nil
}

type GetSimulatedTelemetryDataRequest struct {
	SimulationUuid       string                    `protobuf:"bytes,1,opt,name=simulation_uuid,json=simulationUuid,proto3" json:"simulation_uuid,omitempty"`
	Constructor          Constructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=api.Constructor" json:"constructor,omitempty"`
	CarNumber            int32                     `protobuf:"varint,3,opt,name=car_number,json=carNumber,proto3" json:"car_number,omitempty"`
	DatumDescription     TelemetryDatumDescription `protobuf:"varint,4,opt,name=datum_description,json=datumDescription,proto3,enum=api.TelemetryDatumDescription" json:"datum_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetSimulatedTelemetryDataRequest) Reset()         { *m = GetSimulatedTelemetryDataRequest{} }
func (m *GetSimulatedTelemetryDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetSimulatedTelemetryDataRequest) ProtoMessage()    {}
func (*GetSimulatedTelemetryDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{15}
}
func (m *GetSimulatedTelemetryDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSimulatedTelemetryDataRequest.Unmarshal(m, b)
}
func (m *GetSimulatedTelemetryDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSimulatedTelemetryDataRequest.Marshal(b, m, deterministic)
}
func (dst *GetSimulatedTelemetryDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSimulatedTelemetryDataRequest.Merge(dst, src)
}
func (m *GetSimulatedTelemetryDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetSimulatedTelemetryDataRequest.Size(m)
}
func (m *GetSimulatedTelemetryDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSimulatedTelemetryDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSimulatedTelemetryDataRequest proto.InternalMessageInfo

func (m *GetSimulatedTelemetryDataRequest) GetSimulationUuid() string {
	if m != nil {
		return m.SimulationUuid
	}
	return ""
}

func (m *GetSimulatedTelemetryDataRequest) GetConstructor() Constructor {
	if m != nil {
		return m.Constructor
	}
	return Constructor_ALPHA_ROMEO
}

func (m *GetSimulatedTelemetryDataRequest) GetCarNumber() int32 {
	if m != nil {
		return m.CarNumber
	}
	return 0
}

func (m *GetSimulatedTelemetryDataRequest) GetDatumDescription() TelemetryDatumDescription {
	if m != nil {
		return m.DatumDescription
	}
	return TelemetryDatumDescription_G_FORCE
}

type GetSimulatedTelemetryDataResponse struct {
	ServerStatus         *ServerStatus  `protobuf:"bytes,1,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
	TelemetryData        *TelemetryData `protobuf:"bytes,2,opt,name=telemetry_data,json=telemetryData,proto3" json:"telemetry_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetSimulatedTelemetryDataResponse) Reset()         { *m = GetSimulatedTelemetryDataResponse{} }
func (m *GetSimulatedTelemetryDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetSimulatedTelemetryDataResponse) ProtoMessage()    {}
func (*GetSimulatedTelemetryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7, []int{16}
}
func (m *GetSimulatedTelemetryDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSimulatedTelemetryDataResponse.Unmarshal(m, b)
}
func (m *GetSimulatedTelemetryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSimulatedTelemetryDataResponse.Marshal(b, m, deterministic)
}
func (dst *GetSimulatedTelemetryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSimulatedTelemetryDataResponse.Merge(dst, src)
}
func (m *GetSimulatedTelemetryDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetSimulatedTelemetryDataResponse.Size(m)
}
func (m *GetSimulatedTelemetryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSimulatedTelemetryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSimulatedTelemetryDataResponse proto.InternalMessageInfo

func (m *GetSimulatedTelemetryDataResponse) GetServerStatus() *ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

func (m *GetSimulatedTelemetryDataResponse) GetTelemetryData() *TelemetryData {
	if m != nil {
		return m.TelemetryData
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerStatus)(nil), "api.ServerStatus")
	proto.RegisterType((*HealthCheckRequest)(nil), "api.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "api.HealthCheckResponse")
	proto.RegisterType((*TelemetryDatum)(nil), "api.TelemetryDatum")
	proto.RegisterType((*TelemetryData)(nil), "api.TelemetryData")
	proto.RegisterMapType((map[string]*TelemetryDatum)(nil), "api.TelemetryData.TelemetryDatumMapEntry")
	proto.RegisterType((*SimulationMember)(nil), "api.SimulationMember")
	proto.RegisterType((*Simulation)(nil), "api.Simulation")
	proto.RegisterMapType((map[string]*SimulationMember)(nil), "api.Simulation.SimulationMemberMapEntry")
	proto.RegisterType((*TransmitTelemetryRequest)(nil), "api.TransmitTelemetryRequest")
	proto.RegisterType((*TransmitTelemetryResponse)(nil), "api.TransmitTelemetryResponse")
	proto.RegisterMapType((map[string]*ServerStatus)(nil), "api.TransmitTelemetryResponse.ServerStatusEntry")
	proto.RegisterType((*RunSimulationRequest)(nil), "api.RunSimulationRequest")
	proto.RegisterType((*RunSimulationResponse)(nil), "api.RunSimulationResponse")
	proto.RegisterType((*GetSimulationStatusRequest)(nil), "api.GetSimulationStatusRequest")
	proto.RegisterType((*GetSimulationStatusResponse)(nil), "api.GetSimulationStatusResponse")
	proto.RegisterType((*GetTelemetryDataRequest)(nil), "api.GetTelemetryDataRequest")
	proto.RegisterType((*GetTelemetryDataResponse)(nil), "api.GetTelemetryDataResponse")
	proto.RegisterType((*GetSimulatedTelemetryDataRequest)(nil), "api.GetSimulatedTelemetryDataRequest")
	proto.RegisterType((*GetSimulatedTelemetryDataResponse)(nil), "api.GetSimulatedTelemetryDataResponse")
	proto.RegisterEnum("api.Track", Track_name, Track_value)
	proto.RegisterEnum("api.GranPrix", GranPrix_name, GranPrix_value)
	proto.RegisterEnum("api.Constructor", Constructor_name, Constructor_value)
	proto.RegisterEnum("api.TelemetryDatumUnit", TelemetryDatumUnit_name, TelemetryDatumUnit_value)
	proto.RegisterEnum("api.TelemetryDatumDescription", TelemetryDatumDescription_name, TelemetryDatumDescription_value)
	proto.RegisterEnum("api.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("api.SimulationRateMultiplier", SimulationRateMultiplier_name, SimulationRateMultiplier_value)
	proto.RegisterEnum("api.SampleRate", SampleRate_name, SampleRate_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TransmitTelemetry(ctx context.Context, in *TransmitTelemetryRequest, opts ...grpc.CallOption) (*TransmitTelemetryResponse, error)
	GetTelemetryData(ctx context.Context, in *GetTelemetryDataRequest, opts ...grpc.CallOption) (*GetTelemetryDataResponse, error)
	GetSimulatedTelemetryData(ctx context.Context, in *GetSimulatedTelemetryDataRequest, opts ...grpc.CallOption) (*GetSimulatedTelemetryDataResponse, error)
}

type telemetryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryServiceClient(cc *grpc.ClientConn) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/api.TelemetryService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) TransmitTelemetry(ctx context.Context, in *TransmitTelemetryRequest, opts ...grpc.CallOption) (*TransmitTelemetryResponse, error) {
	out := new(TransmitTelemetryResponse)
	err := c.cc.Invoke(ctx, "/api.TelemetryService/TransmitTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetTelemetryData(ctx context.Context, in *GetTelemetryDataRequest, opts ...grpc.CallOption) (*GetTelemetryDataResponse, error) {
	out := new(GetTelemetryDataResponse)
	err := c.cc.Invoke(ctx, "/api.TelemetryService/GetTelemetryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetSimulatedTelemetryData(ctx context.Context, in *GetSimulatedTelemetryDataRequest, opts ...grpc.CallOption) (*GetSimulatedTelemetryDataResponse, error) {
	out := new(GetSimulatedTelemetryDataResponse)
	err := c.cc.Invoke(ctx, "/api.TelemetryService/GetSimulatedTelemetryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
type TelemetryServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TransmitTelemetry(context.Context, *TransmitTelemetryRequest) (*TransmitTelemetryResponse, error)
	GetTelemetryData(context.Context, *GetTelemetryDataRequest) (*GetTelemetryDataResponse, error)
	GetSimulatedTelemetryData(context.Context, *GetSimulatedTelemetryDataRequest) (*GetSimulatedTelemetryDataResponse, error)
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TelemetryService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_TransmitTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransmitTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).TransmitTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TelemetryService/TransmitTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).TransmitTelemetry(ctx, req.(*TransmitTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetTelemetryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetTelemetryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TelemetryService/GetTelemetryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetTelemetryData(ctx, req.(*GetTelemetryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetSimulatedTelemetryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulatedTelemetryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetSimulatedTelemetryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TelemetryService/GetSimulatedTelemetryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetSimulatedTelemetryData(ctx, req.(*GetSimulatedTelemetryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TelemetryService_HealthCheck_Handler,
		},
		{
			MethodName: "TransmitTelemetry",
			Handler:    _TelemetryService_TransmitTelemetry_Handler,
		},
		{
			MethodName: "GetTelemetryData",
			Handler:    _TelemetryService_GetTelemetryData_Handler,
		},
		{
			MethodName: "GetSimulatedTelemetryData",
			Handler:    _TelemetryService_GetSimulatedTelemetryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FOTAAS.proto",
}

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type analysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalysisServiceClient(cc *grpc.ClientConn) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/api.AnalysisService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
type AnalysisServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnalysisService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AnalysisService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FOTAAS.proto",
}

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimulationServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	RunSimulation(ctx context.Context, in *RunSimulationRequest, opts ...grpc.CallOption) (*RunSimulationResponse, error)
	GetSimulationStatus(ctx context.Context, in *GetSimulationStatusRequest, opts ...grpc.CallOption) (*GetSimulationStatusResponse, error)
}

type simulationServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimulationServiceClient(cc *grpc.ClientConn) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/api.SimulationService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) RunSimulation(ctx context.Context, in *RunSimulationRequest, opts ...grpc.CallOption) (*RunSimulationResponse, error) {
	out := new(RunSimulationResponse)
	err := c.cc.Invoke(ctx, "/api.SimulationService/RunSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) GetSimulationStatus(ctx context.Context, in *GetSimulationStatusRequest, opts ...grpc.CallOption) (*GetSimulationStatusResponse, error) {
	out := new(GetSimulationStatusResponse)
	err := c.cc.Invoke(ctx, "/api.SimulationService/GetSimulationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServiceServer is the server API for SimulationService service.
type SimulationServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	RunSimulation(context.Context, *RunSimulationRequest) (*RunSimulationResponse, error)
	GetSimulationStatus(context.Context, *GetSimulationStatusRequest) (*GetSimulationStatusResponse, error)
}

func RegisterSimulationServiceServer(s *grpc.Server, srv SimulationServiceServer) {
	s.RegisterService(&_SimulationService_serviceDesc, srv)
}

func _SimulationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimulationService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_RunSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).RunSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimulationService/RunSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).RunSimulation(ctx, req.(*RunSimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_GetSimulationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).GetSimulationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimulationService/GetSimulationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).GetSimulationStatus(ctx, req.(*GetSimulationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimulationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SimulationService_HealthCheck_Handler,
		},
		{
			MethodName: "RunSimulation",
			Handler:    _SimulationService_RunSimulation_Handler,
		},
		{
			MethodName: "GetSimulationStatus",
			Handler:    _SimulationService_GetSimulationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FOTAAS.proto",
}

func init() { proto.RegisterFile("FOTAAS.proto", fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7) }

var fileDescriptor_FOTAAS_3ffcdb61c1c3e8b7 = []byte{
	// 2196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdb, 0x72, 0xdb, 0xc6,
	0x19, 0x16, 0x78, 0x10, 0xc9, 0x9f, 0x22, 0xb5, 0x5c, 0xc9, 0x31, 0xcd, 0xd8, 0xb1, 0xca, 0x4c,
	0x1b, 0x45, 0x99, 0x51, 0x64, 0xb5, 0xd3, 0x49, 0x7b, 0x95, 0x25, 0xb8, 0x02, 0x61, 0xe1, 0xc0,
	0x2e, 0x80, 0xc4, 0x72, 0xdb, 0xd9, 0x81, 0x45, 0x44, 0xe6, 0x98, 0x04, 0x55, 0x02, 0x74, 0xe2,
	0xfb, 0xde, 0x66, 0x7a, 0xd3, 0xe9, 0x5d, 0x9f, 0xa1, 0x6f, 0xd1, 0xe7, 0xe8, 0x55, 0x2f, 0xda,
	0xe9, 0xf4, 0x09, 0x3a, 0xd3, 0xd9, 0x05, 0x78, 0x14, 0xe4, 0x2a, 0x75, 0x3a, 0xbd, 0x22, 0xfe,
	0xe3, 0xfe, 0x87, 0x6f, 0xff, 0xdd, 0x25, 0xec, 0x9c, 0xd9, 0x2e, 0x21, 0xce, 0xf1, 0xf5, 0x74,
	0x12, 0x4f, 0x70, 0xde, 0xbf, 0x1e, 0xb6, 0x1e, 0x5f, 0x4d, 0x26, 0x57, 0xa3, 0xe0, 0x53, 0xc9,
	0x7a, 0x31, 0xfb, 0xea, 0xd3, 0x78, 0x38, 0x0e, 0xa2, 0xd8, 0x1f, 0x5f, 0x27, 0x5a, 0x6d, 0x13,
	0x76, 0x9c, 0x60, 0xfa, 0x3a, 0x98, 0x3a, 0xb1, 0x1f, 0xcf, 0x22, 0xfc, 0x21, 0x14, 0x2e, 0x27,
	0x83, 0xa0, 0xa9, 0x1c, 0x28, 0x87, 0xf5, 0xd3, 0xdd, 0x63, 0xff, 0x7a, 0x78, 0x9c, 0x88, 0xd4,
	0xc9, 0x20, 0x60, 0x52, 0x88, 0x9b, 0x50, 0x1a, 0x07, 0x51, 0xe4, 0x5f, 0x05, 0xcd, 0xdc, 0x81,
	0x72, 0x58, 0x61, 0x73, 0xb2, 0xbd, 0x0f, 0xb8, 0x17, 0xf8, 0xa3, 0xf8, 0xa5, 0xfa, 0x32, 0xb8,
	0x7c, 0xc5, 0x82, 0xdf, 0xcc, 0x82, 0x28, 0x6e, 0x9b, 0xb0, 0xb7, 0xc6, 0x8d, 0xae, 0x27, 0x61,
	0x14, 0xe0, 0x9f, 0x42, 0x2d, 0x92, 0x6b, 0xf3, 0x48, 0xae, 0x20, 0x17, 0xad, 0x9e, 0x36, 0x92,
	0x45, 0x57, 0xa2, 0x62, 0x3b, 0xd1, 0x0a, 0xd5, 0xfe, 0xb6, 0x00, 0x75, 0x37, 0x18, 0x05, 0xe3,
	0x20, 0x9e, 0xbe, 0xe9, 0xfa, 0xf1, 0x6c, 0x8c, 0x31, 0x14, 0x66, 0xb3, 0xe1, 0x40, 0x7a, 0xa8,
	0x30, 0xf9, 0x8d, 0x3f, 0x87, 0xea, 0x20, 0x88, 0x2e, 0xa7, 0xc3, 0xeb, 0x78, 0x38, 0x09, 0x65,
	0xa4, 0xf5, 0xd3, 0x0f, 0xa4, 0xf3, 0x75, 0xeb, 0xee, 0x52, 0x8b, 0xad, 0x9a, 0xe0, 0x4f, 0xa0,
	0x30, 0x0b, 0x87, 0x71, 0x33, 0x2f, 0x4d, 0xef, 0x67, 0x98, 0x7a, 0xe1, 0x30, 0x66, 0x52, 0x09,
	0x7f, 0x06, 0x95, 0x45, 0x71, 0x9b, 0x05, 0x99, 0x49, 0xeb, 0x38, 0x29, 0xff, 0xf1, 0xbc, 0xfc,
	0xc7, 0xee, 0x5c, 0x83, 0x2d, 0x95, 0x71, 0x0b, 0xca, 0x23, 0x3f, 0x1e, 0xc6, 0xb3, 0x41, 0xd0,
	0x2c, 0x1e, 0x28, 0x87, 0x0a, 0x5b, 0xd0, 0xf8, 0x21, 0x54, 0x46, 0x93, 0xf0, 0x2a, 0x11, 0x6e,
	0x4b, 0xe1, 0x92, 0x21, 0xa4, 0xc1, 0x28, 0x78, 0xed, 0xcb, 0x04, 0x4b, 0x89, 0x74, 0xc1, 0xc0,
	0xfb, 0x50, 0x7c, 0xed, 0x8f, 0x66, 0x41, 0xb3, 0x2c, 0x25, 0x09, 0x81, 0x1f, 0x01, 0xbc, 0x1c,
	0x5e, 0xbd, 0xe4, 0xfe, 0xc8, 0x9f, 0x8e, 0x9b, 0x95, 0x03, 0xe5, 0xb0, 0xcc, 0x2a, 0x82, 0x43,
	0x04, 0x03, 0xbf, 0x2f, 0x16, 0xfc, 0x3a, 0x95, 0x82, 0x94, 0x96, 0x47, 0x93, 0xaf, 0x13, 0xe1,
	0x43, 0xa8, 0x44, 0xc3, 0xf1, 0x6c, 0xe4, 0xc7, 0xc1, 0xa0, 0x59, 0x4d, 0x4c, 0x17, 0x0c, 0xfc,
	0x11, 0xec, 0xa6, 0xc4, 0x70, 0x12, 0x72, 0xd9, 0x8f, 0x1d, 0xd9, 0x8f, 0xfa, 0x92, 0xed, 0x89,
	0xce, 0x98, 0xf0, 0xe1, 0x8a, 0x62, 0x3c, 0xf5, 0xc3, 0x68, 0x3c, 0x8c, 0x79, 0x24, 0xe0, 0x12,
	0x5e, 0x06, 0x3c, 0x9c, 0x8d, 0x5f, 0x04, 0xd3, 0x66, 0xed, 0x40, 0x39, 0x2c, 0xb2, 0x83, 0xa5,
	0xaa, 0x9b, 0x6a, 0x3a, 0xa9, 0xa2, 0x25, 0xf5, 0xda, 0x7f, 0xcd, 0x41, 0x6d, 0xb5, 0x2d, 0x3e,
	0x3e, 0x82, 0xca, 0xd5, 0xd4, 0x0f, 0xf9, 0xf5, 0x74, 0xf8, 0x4d, 0x0a, 0xe5, 0x9a, 0xec, 0x9e,
	0x36, 0xf5, 0xc3, 0xfe, 0x74, 0xf8, 0x0d, 0x2b, 0x5f, 0xa5, 0x5f, 0xf8, 0x00, 0x8a, 0xf1, 0xd4,
	0xbf, 0x7c, 0x95, 0x02, 0x04, 0x92, 0x2e, 0x0b, 0x0e, 0x4b, 0x04, 0xf8, 0x14, 0xaa, 0x97, 0x93,
	0x30, 0x8a, 0xa7, 0xb3, 0xcb, 0x78, 0x32, 0x4d, 0xd1, 0x80, 0xa4, 0x9e, 0xba, 0xe4, 0xb3, 0x55,
	0x25, 0x51, 0xe5, 0x4b, 0x7f, 0x3a, 0xcf, 0xa4, 0x20, 0x33, 0xa9, 0x5c, 0xfa, 0xd3, 0x24, 0x64,
	0x7c, 0x01, 0x7b, 0xf1, 0x3c, 0x62, 0x3e, 0x10, 0x48, 0xe2, 0x63, 0xff, 0xba, 0x59, 0x3c, 0xc8,
	0x1f, 0x56, 0x4f, 0x3f, 0xbe, 0x01, 0x34, 0x7f, 0x03, 0x76, 0xa6, 0x7f, 0x4d, 0xc3, 0x78, 0xfa,
	0x86, 0x35, 0xe2, 0x4d, 0x7e, 0xeb, 0x02, 0xde, 0xcb, 0x56, 0xc6, 0x08, 0xf2, 0xaf, 0x82, 0x37,
	0xe9, 0x1e, 0x11, 0x9f, 0xf8, 0xe3, 0x39, 0x42, 0x72, 0x12, 0xaf, 0x7b, 0x19, 0x08, 0x4f, 0x61,
	0xf3, 0xf3, 0xdc, 0x67, 0x4a, 0xfb, 0x2f, 0x0a, 0x20, 0x67, 0xd1, 0x0d, 0x33, 0x90, 0xa9, 0x64,
	0x6d, 0xbd, 0x0c, 0x24, 0xe4, 0x32, 0x91, 0xf0, 0x3f, 0x28, 0xed, 0x63, 0xa8, 0x7e, 0x35, 0x99,
	0x5e, 0x06, 0x29, 0x84, 0x8b, 0x12, 0xa5, 0x20, 0x59, 0x0b, 0x84, 0x87, 0x93, 0x44, 0x1a, 0xc9,
	0x2d, 0x55, 0x66, 0xe5, 0x70, 0x22, 0x65, 0x51, 0xfb, 0x6f, 0x79, 0x80, 0x65, 0x8a, 0x99, 0xc9,
	0x1d, 0xc3, 0xde, 0x60, 0x36, 0x4d, 0x52, 0x1b, 0x86, 0x7c, 0x3c, 0x0c, 0x67, 0x71, 0x10, 0xc9,
	0x04, 0x8b, 0xac, 0x31, 0x17, 0xe9, 0xa1, 0x99, 0x08, 0xf0, 0x09, 0x54, 0x23, 0x7f, 0x7c, 0x3d,
	0x0a, 0xf8, 0xd4, 0x8f, 0x83, 0x34, 0xc7, 0x74, 0xb2, 0x4a, 0x3e, 0xf3, 0xe3, 0x80, 0x41, 0xb4,
	0xf8, 0xc6, 0xbf, 0x84, 0xd6, 0x4a, 0xf9, 0x84, 0x15, 0x1f, 0xcf, 0x46, 0xf1, 0xf0, 0x7a, 0x34,
	0x4c, 0x33, 0xae, 0x9f, 0x3e, 0x4a, 0x1c, 0x2c, 0xd4, 0x84, 0xa1, 0xb9, 0x50, 0x62, 0xcd, 0xe8,
	0x16, 0xc9, 0xfa, 0xde, 0x28, 0xde, 0x71, 0x6f, 0x6c, 0xdf, 0xb6, 0x37, 0x7e, 0x05, 0xf7, 0x56,
	0x42, 0x1d, 0x4b, 0x48, 0x48, 0x28, 0x97, 0x24, 0x94, 0x0f, 0x37, 0xa2, 0x3c, 0xde, 0x84, 0xcf,
	0x02, 0xc9, 0x7b, 0xd1, 0x4d, 0x49, 0xeb, 0xd7, 0xd0, 0xbc, 0xcd, 0x20, 0x03, 0xcd, 0x9f, 0xac,
	0xa3, 0xf9, 0xde, 0xc6, 0xda, 0x89, 0xfd, 0x2a, 0x9e, 0x3d, 0x68, 0xce, 0x47, 0xca, 0x02, 0xf4,
	0xe9, 0x99, 0x85, 0x7f, 0x06, 0xf5, 0xb5, 0x1d, 0xea, 0xa7, 0xa7, 0x13, 0xbe, 0xb9, 0x39, 0x59,
	0x6d, 0x75, 0x17, 0xfa, 0xed, 0x3f, 0x2b, 0xf0, 0x20, 0xc3, 0x6f, 0x7a, 0xea, 0x79, 0x37, 0x4f,
	0x3d, 0x51, 0xa9, 0x93, 0x79, 0x6d, 0xb3, 0xcd, 0xd6, 0xce, 0xc3, 0xa4, 0x62, 0x6b, 0x87, 0x62,
	0x8b, 0x41, 0xe3, 0x86, 0x4a, 0x46, 0x8d, 0x3e, 0x5a, 0xaf, 0x51, 0xc6, 0x59, 0xbb, 0x52, 0x1f,
	0x0d, 0xf6, 0xd9, 0x2c, 0x5c, 0xc1, 0x58, 0x5a, 0x9b, 0x4f, 0x01, 0x96, 0xdd, 0x4a, 0xeb, 0xb2,
	0xbb, 0x89, 0xc7, 0x15, 0x95, 0xb6, 0x0d, 0xf7, 0x36, 0x1c, 0xbd, 0xe3, 0x15, 0xe0, 0x04, 0x5a,
	0x5a, 0x10, 0x2f, 0x1d, 0xa6, 0x4a, 0x69, 0x7c, 0x19, 0xbb, 0xb6, 0xed, 0xc1, 0xfb, 0x99, 0x16,
	0xef, 0x18, 0xc8, 0xef, 0xf2, 0x70, 0x5f, 0x0b, 0xe2, 0x75, 0x3c, 0xa4, 0x61, 0x74, 0x01, 0x0d,
	0xc4, 0xde, 0x9d, 0xfa, 0xe1, 0x55, 0xc0, 0x5f, 0x04, 0x57, 0xc3, 0x79, 0xb1, 0xde, 0x76, 0x31,
	0xa8, 0x0b, 0x1b, 0x26, 0x4c, 0x3a, 0xc2, 0x02, 0x7f, 0x0e, 0xf5, 0x15, 0x2f, 0x41, 0x38, 0x48,
	0x5b, 0xf7, 0x36, 0x1f, 0x3b, 0x0b, 0x1f, 0x34, 0x1c, 0xac, 0xef, 0xf8, 0xfc, 0x1d, 0x77, 0x7c,
	0xe1, 0x8e, 0xa7, 0x61, 0xf1, 0xbb, 0x8f, 0xec, 0xed, 0xcd, 0x91, 0x7d, 0x0e, 0x8d, 0xe4, 0x0c,
	0x5c, 0xbd, 0xaf, 0x95, 0xee, 0x74, 0x5f, 0x43, 0x83, 0x0d, 0x4e, 0xfb, 0x5b, 0x05, 0x9a, 0x37,
	0x3b, 0xf2, 0x6e, 0x6d, 0xce, 0x98, 0x06, 0xb9, 0xbb, 0x4e, 0x83, 0xbf, 0x2b, 0x70, 0xb0, 0x44,
	0x5e, 0x30, 0xc8, 0x84, 0x4a, 0xc6, 0x81, 0xa9, 0xdc, 0xe5, 0xc0, 0xcc, 0x7d, 0xf7, 0xea, 0xe7,
	0xef, 0x54, 0xfd, 0xc2, 0x7f, 0x59, 0xfd, 0x3f, 0x28, 0xf0, 0x83, 0xb7, 0x64, 0xfb, 0x7f, 0x6b,
	0xc3, 0xd1, 0x3f, 0x73, 0x50, 0x94, 0x38, 0xc6, 0x00, 0xdb, 0xc4, 0x73, 0x5c, 0xdd, 0x42, 0x5b,
	0xb8, 0x0c, 0x85, 0x0e, 0x39, 0xf7, 0x90, 0x82, 0xef, 0xc3, 0x9e, 0x4a, 0x5c, 0x62, 0x78, 0xd6,
	0x05, 0xe1, 0x1d, 0xc2, 0x54, 0x6a, 0xd8, 0x16, 0x41, 0x39, 0x5c, 0x07, 0xe8, 0xd9, 0xea, 0x39,
	0xb5, 0x7a, 0x54, 0x37, 0x51, 0x1e, 0xef, 0x42, 0xb5, 0xe7, 0x59, 0x1a, 0x61, 0x36, 0xd3, 0x2d,
	0x0d, 0x15, 0x70, 0x13, 0xf6, 0x75, 0xcb, 0xa5, 0xcc, 0x20, 0x9a, 0xed, 0x70, 0x87, 0x78, 0xbc,
	0x4f, 0x3c, 0xc3, 0x46, 0x45, 0x61, 0x6a, 0x12, 0xa6, 0x5b, 0xc2, 0xe1, 0x05, 0xda, 0xc6, 0x35,
	0xa8, 0x98, 0xd4, 0xe8, 0xd8, 0x1e, 0xb3, 0x28, 0x2a, 0x09, 0x4f, 0x26, 0x7d, 0xa6, 0xab, 0x36,
	0x57, 0x75, 0xf7, 0x02, 0x95, 0x25, 0xc3, 0xb6, 0x5c, 0xca, 0x55, 0xc2, 0x0c, 0x1b, 0x55, 0xf0,
	0x0e, 0x94, 0x05, 0x83, 0x51, 0x62, 0x20, 0xc0, 0x15, 0x28, 0x9a, 0xb6, 0xf5, 0x9c, 0xa0, 0x2a,
	0x7e, 0x08, 0x4d, 0xb1, 0x08, 0x67, 0xba, 0x4a, 0x58, 0x97, 0x1b, 0xc2, 0xc4, 0x71, 0xa9, 0x61,
	0x50, 0x17, 0xed, 0x88, 0x0c, 0x1d, 0x72, 0xde, 0xd3, 0x19, 0xaa, 0x09, 0x17, 0x4e, 0x8f, 0x58,
	0x5a, 0x8f, 0xe8, 0xa8, 0x2e, 0x56, 0x70, 0x74, 0xe3, 0x0b, 0xca, 0x1c, 0xd7, 0xb6, 0x28, 0xda,
	0x15, 0x3e, 0x1d, 0x5b, 0xed, 0xe9, 0x08, 0xe1, 0x7b, 0xd0, 0x70, 0xfa, 0x84, 0x9f, 0x31, 0x62,
	0xa9, 0x36, 0x53, 0x7b, 0xc4, 0xec, 0x3b, 0xa8, 0x81, 0xdf, 0x87, 0xfb, 0x4e, 0x5f, 0xa7, 0x46,
	0x87, 0x32, 0x8d, 0x33, 0xda, 0xe5, 0x1d, 0xcf, 0x10, 0x0b, 0x5b, 0x1a, 0xc2, 0x72, 0x25, 0xef,
	0xb9, 0x77, 0x4e, 0xd0, 0x9e, 0xc8, 0xf6, 0x82, 0x38, 0x3c, 0xc9, 0x18, 0xed, 0x1f, 0xfd, 0x29,
	0x07, 0xe5, 0xf9, 0x84, 0xc1, 0x0d, 0xa8, 0x79, 0x96, 0xee, 0xd2, 0x2e, 0x77, 0x5c, 0xe2, 0x52,
	0x07, 0x6d, 0x09, 0x7d, 0xf2, 0x9c, 0xb2, 0x0e, 0xd1, 0x9f, 0x12, 0x0b, 0x29, 0xb8, 0x0a, 0x25,
	0xa7, 0x4f, 0x2c, 0xdd, 0xe9, 0xa1, 0x9c, 0x70, 0xac, 0x51, 0x66, 0x12, 0x0b, 0xe5, 0x45, 0xd9,
	0x92, 0x8a, 0xeb, 0xc4, 0x42, 0x05, 0x41, 0x76, 0x18, 0x79, 0xae, 0x1b, 0x82, 0x2c, 0x0a, 0xd2,
	0xd1, 0x2d, 0x8d, 0xf4, 0x6d, 0x46, 0xd1, 0xb6, 0xf4, 0xea, 0x39, 0x2e, 0x23, 0x52, 0x5c, 0x12,
	0x5e, 0x65, 0x91, 0x89, 0x85, 0xca, 0xc2, 0xab, 0x69, 0x5b, 0x44, 0x4d, 0x6b, 0xab, 0x12, 0x8b,
	0x74, 0x85, 0x1a, 0x08, 0x35, 0xdd, 0x4d, 0x6c, 0xaa, 0x42, 0xed, 0x8c, 0x51, 0x4b, 0xed, 0xa1,
	0x1d, 0x21, 0xe8, 0x90, 0x1e, 0x23, 0xba, 0x85, 0x6a, 0x82, 0x50, 0x7b, 0xba, 0x45, 0x1d, 0x8a,
	0xea, 0x52, 0xc2, 0x74, 0x57, 0xc4, 0xbb, 0x2b, 0x08, 0xe6, 0x39, 0x8e, 0xb0, 0x47, 0x52, 0x42,
	0x0d, 0x4d, 0x10, 0x0d, 0xb1, 0x8e, 0x0c, 0x48, 0x50, 0x58, 0x50, 0x4f, 0x49, 0x9f, 0x48, 0x17,
	0x7b, 0x22, 0x76, 0xd2, 0xf1, 0x78, 0xb7, 0x47, 0x3a, 0x3a, 0xda, 0x3f, 0xfa, 0xa3, 0x02, 0xd5,
	0x95, 0x5d, 0x2c, 0xba, 0x45, 0x8c, 0x7e, 0x8f, 0x70, 0x66, 0x9b, 0xd4, 0x46, 0x5b, 0xc2, 0xf1,
	0x19, 0x65, 0x8c, 0x30, 0x1d, 0x29, 0x02, 0xbb, 0x3d, 0x42, 0x1c, 0x94, 0x93, 0x39, 0xaa, 0x06,
	0x61, 0x54, 0x54, 0x4b, 0x60, 0x86, 0x32, 0x95, 0x76, 0xa9, 0x83, 0x0a, 0x18, 0xc1, 0x0e, 0x23,
	0xaa, 0x6e, 0x69, 0xbc, 0x6f, 0xeb, 0x96, 0x8b, 0x8a, 0x78, 0x0f, 0x76, 0x97, 0x5d, 0x94, 0x22,
	0xb4, 0x8d, 0xdf, 0x03, 0xec, 0xa8, 0x5e, 0x97, 0x32, 0x9d, 0x70, 0xd7, 0x66, 0x36, 0x67, 0xb6,
	0x63, 0xa3, 0x92, 0x70, 0xf6, 0xa5, 0x6e, 0x18, 0x3a, 0x31, 0x1d, 0x54, 0x3e, 0xfa, 0xbd, 0x02,
	0xf8, 0xe6, 0xfb, 0x17, 0x17, 0x41, 0xd1, 0xd0, 0x96, 0x88, 0xf6, 0x5c, 0xe3, 0x7d, 0xca, 0x78,
	0xcf, 0xf6, 0x18, 0x52, 0x30, 0x86, 0x7a, 0x97, 0x6a, 0x8c, 0x52, 0xae, 0x52, 0x43, 0xd5, 0x3d,
	0x11, 0xea, 0x36, 0xe4, 0xcc, 0xa7, 0x28, 0x8f, 0x4b, 0x90, 0x7f, 0xda, 0x17, 0x01, 0x96, 0x20,
	0xcf, 0xfa, 0x26, 0x2a, 0x8a, 0x8f, 0x0e, 0x61, 0x68, 0x5b, 0xa8, 0x9c, 0x6b, 0xa8, 0x24, 0x18,
	0xe7, 0xfd, 0x1e, 0x2a, 0x4b, 0xdc, 0x53, 0x97, 0x32, 0x54, 0x11, 0x9d, 0x61, 0xf3, 0x96, 0x49,
	0x39, 0x41, 0xd5, 0xa3, 0xdf, 0x16, 0xe0, 0xc1, 0xad, 0x33, 0x4a, 0x14, 0x47, 0xe3, 0x67, 0x36,
	0x53, 0x29, 0xda, 0x12, 0x18, 0x4f, 0x09, 0xde, 0xd5, 0x19, 0x55, 0x5d, 0xdd, 0x16, 0xd0, 0x6b,
	0x40, 0xed, 0xcc, 0xa3, 0x06, 0x57, 0x6d, 0xcb, 0xf1, 0x4c, 0xda, 0x45, 0x39, 0xd1, 0x1a, 0xc9,
	0x3a, 0x33, 0xec, 0x2f, 0x51, 0x5e, 0x8c, 0x07, 0x6a, 0x69, 0xba, 0x45, 0xb9, 0x6a, 0xdb, 0x06,
	0xb1, 0x5c, 0xee, 0x52, 0xb3, 0x8f, 0x0a, 0x2b, 0x02, 0x5b, 0x37, 0x78, 0x9f, 0x51, 0xc7, 0xf1,
	0x18, 0x4d, 0xea, 0xbc, 0x22, 0x90, 0xda, 0x12, 0x9d, 0x29, 0x53, 0x24, 0x5d, 0x12, 0x0b, 0x77,
	0x18, 0x39, 0xa7, 0x52, 0xce, 0xcf, 0x18, 0x2a, 0x6f, 0xb2, 0x0c, 0x54, 0xd9, 0x60, 0x31, 0x86,
	0x60, 0x93, 0x65, 0xa0, 0xaa, 0x98, 0x43, 0xd4, 0xa2, 0x4c, 0xbb, 0xe0, 0x8e, 0x6b, 0x33, 0xa2,
	0x51, 0x6e, 0xd0, 0x2f, 0xa8, 0x81, 0x76, 0x92, 0x18, 0xd7, 0x24, 0x32, 0x9c, 0x9a, 0x1c, 0x38,
	0x9a, 0x77, 0xce, 0x6d, 0xcf, 0xed, 0x7b, 0x6e, 0x32, 0x1f, 0x4c, 0xcd, 0xeb, 0xcd, 0x19, 0xc9,
	0x7c, 0xe8, 0x53, 0xda, 0x45, 0x08, 0xef, 0x03, 0x72, 0x75, 0x46, 0x17, 0x39, 0x8a, 0x70, 0x1b,
	0x19, 0x5c, 0x03, 0xe1, 0x9b, 0x5c, 0xc6, 0xd0, 0x5e, 0x06, 0xd7, 0x40, 0xfb, 0x02, 0xa2, 0x92,
	0x3b, 0x2f, 0xc1, 0xbd, 0x0d, 0x8e, 0x81, 0xde, 0x5b, 0xe7, 0x30, 0x86, 0xee, 0x6f, 0x70, 0x0c,
	0xd4, 0x3c, 0x7a, 0x0c, 0xb0, 0xfc, 0xa7, 0x4a, 0xa0, 0xc8, 0x3e, 0x47, 0x5b, 0x22, 0x01, 0xca,
	0x98, 0xcd, 0x90, 0x72, 0x64, 0xac, 0xbe, 0x26, 0x36, 0x5e, 0x45, 0xdb, 0x90, 0x7b, 0xf6, 0x04,
	0x6d, 0xc9, 0xdf, 0x53, 0xa4, 0xc8, 0xdf, 0x9f, 0x24, 0x78, 0x7d, 0xf6, 0x59, 0x82, 0xd7, 0x67,
	0x4f, 0x4e, 0x12, 0xbc, 0x3e, 0x3b, 0x3d, 0x41, 0xc5, 0xa3, 0x33, 0x80, 0xe5, 0xf3, 0x4d, 0x0e,
	0x2f, 0xc6, 0x9f, 0x70, 0x53, 0x4c, 0x36, 0x31, 0x73, 0x19, 0x7f, 0x72, 0x22, 0x28, 0x45, 0x0e,
	0x28, 0x41, 0x49, 0x52, 0x9e, 0x27, 0x09, 0x29, 0xe9, 0xfc, 0xe9, 0x3f, 0x72, 0x80, 0x16, 0xe8,
	0x15, 0x67, 0xdf, 0xf0, 0x32, 0xc0, 0x1d, 0xa8, 0xae, 0xfc, 0x63, 0x86, 0x93, 0xbf, 0x9e, 0x6e,
	0xfe, 0xb3, 0xd6, 0x6a, 0xde, 0x14, 0x24, 0x47, 0x6c, 0x7b, 0x0b, 0xbb, 0xd0, 0xb8, 0xf1, 0x9c,
	0xc0, 0x8f, 0x6e, 0x7b, 0x66, 0x24, 0xfe, 0x3e, 0x78, 0xfb, 0x2b, 0xa4, 0xbd, 0x85, 0x7f, 0x01,
	0x68, 0xf3, 0x76, 0x85, 0x1f, 0x26, 0xb7, 0xc9, 0xec, 0x6b, 0x70, 0xeb, 0xd1, 0x2d, 0xd2, 0x85,
	0xcb, 0x11, 0x3c, 0xb8, 0xf5, 0xca, 0x80, 0x7f, 0x38, 0xb7, 0x7e, 0xeb, 0x05, 0xaa, 0xf5, 0xa3,
	0xff, 0xa4, 0x36, 0x5f, 0xed, 0xd4, 0x83, 0x5d, 0x12, 0xfa, 0xa3, 0x37, 0xd1, 0x30, 0xfa, 0x1e,
	0xab, 0x7d, 0xfa, 0x2f, 0x05, 0x1a, 0x2b, 0xaf, 0x8b, 0xef, 0xb1, 0x8f, 0x3d, 0xa8, 0xad, 0x3d,
	0x9e, 0xf0, 0x03, 0xa9, 0x9c, 0xf5, 0x32, 0x6b, 0xb5, 0xb2, 0x44, 0x0b, 0x4f, 0xcf, 0x61, 0x2f,
	0xe3, 0x0d, 0x84, 0x1f, 0x6f, 0xd4, 0x6e, 0xf3, 0x3d, 0xd5, 0x3a, 0xb8, 0x5d, 0x61, 0xee, 0xfb,
	0xc5, 0xb6, 0x7c, 0x86, 0xfc, 0xf8, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xb2, 0x02, 0x36,
	0x85, 0x16, 0x00, 0x00,
}
