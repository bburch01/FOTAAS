syntax = "proto3";

package api;

import "google/protobuf/timestamp.proto";

enum Track {
    AUSTIN = 0;
    BAKU = 1;
    CATALUNYA_BARCELONA = 2;
    HOCKENHEIM = 3;
    HUNGARORING = 4;
    INTERLAGOS_SAU_PAULO = 5;
    MARINA_BAY = 6;
    MELBOURNE = 7;
    MEXICO_CITY = 8;
    MONTE_CARLO = 9;
    MONTREAL = 10;
    MONZA = 11;
    PAUL_RICARD_LE_CASTELLET = 12;
    SAKHIR = 13;
    SHANGHAI = 14;
    SILVERSTONE = 15;
    SOCHI = 16;
    SPA_FRANCORCHAMPS = 17;
    SPIELBERG_RED_BULL_RING = 18;
    SUZUKA = 19;
    YAS_MARINA = 20;
}

enum GranPrix {
    UNITED_STATES = 0;
    AZERBAIJAN = 1;
    SPANISH = 2;
    GERMAN = 3;
    HUNGARIAN = 4;
    BRAZILIAN = 5;
    SINGAPORE = 6;
    AUSTRALIAN = 7;
    MEXICAN = 8;
    MONACO = 9;
    CANADIAN = 10;
    ITALIAN = 11;
    FRENCH = 12;
    BAHRAIN = 13;
    CHINESE = 14;
    BRITISH = 15;
    RUSSIAN = 16;
    BELGIAN = 17;
    AUSTRIAN = 18;
    JAPANESE = 19;
    ABU_DHABI = 20;
}
enum Constructor {
    ALPHA_ROMEO = 0;
    FERRARI = 1;
    HAAS = 2;
    MCLAREN = 3;
    MERCEDES = 4;
    RACING_POINT = 5;
    RED_BULL_RACING = 6;
    SCUDERIA_TORO_ROSO = 7;
    WILLIAMS = 8;
}

enum TelemetryDatumUnit {
    G = 0;
    KG_PER_HOUR = 1;
    DEGREE_CELCIUS = 2;
    MJ = 3;
    JPS = 4;
    RPM = 5;
    BAR = 6;
    KG = 7;
    KPH = 8;
    METER = 9;
    RADIAN = 10;
    KPA = 11;        
}
enum TelemetryDatumDescription {
    G_FORCE = 0;
    G_FORCE_DIRECTION = 1;
    FUEL_CONSUMED = 2;
    FUEL_FLOW = 3;
    ENGINE_COOLANT_TEMP = 4;
    ENGINE_OIL_PRESSURE = 5;
    ENGINE_OIL_TEMP = 6;
    ENGINE_RPM = 7;
    BRAKE_TEMP_FR = 8;
    BRAKE_TEMP_FL = 9;
    BRAKE_TEMP_RR = 10;
    BRAKE_TEMP_RL = 11;
    ENERGY_STORAGE_LEVEL = 12;
    ENERGY_STORAGE_TEMP = 13;
    MGUK_OUTPUT = 14;
    MGUH_OUTPUT = 15;
    SPEED = 16;
    TIRE_PRESSURE_FR = 17;
    TIRE_PRESSURE_FL = 18;
    TIRE_PRESSURE_RR = 19;
    TIRE_PRESSURE_RL = 20;
    TIRE_TEMP_FR = 21;
    TIRE_TEMP_FL = 22;
    TIRE_TEMP_RR = 23;
    TIRE_TEMP_RL = 24;        
}

enum ResponseCode {
    OK = 0;
    ERROR = 1;
    INFO = 2;
    WARN = 3;
}

message ResponseDetails {
    ResponseCode code = 1;
    string message = 2;
}

enum TestResult {
    PASS = 0;
    FAIL = 1;
    INCOMPLETE = 2;
}

enum SimulationRateMultiplier {
    X1 = 0;
    X2 = 1;
    X4 = 2;
    X8 = 3;
    X10 = 4;
    X20 = 5;
}

enum SampleRate {
    SR_1_MS = 0;
    SR_10_MS = 1;
    SR_100_MS = 2;
    SR_1000_MS = 3;
}

enum SimulationState {
    INITIALIZING = 0;
    IN_PROGRESS = 1;
    COMPLETED = 2;
    FAILED_TO_START = 3;
    FAILED = 4;                
}

message TelemetryDatum {
    string uuid = 1;
    TelemetryDatumDescription description = 2;
    TelemetryDatumUnit unit = 3;
    google.protobuf.Timestamp timestamp = 4;
    double latitude = 5;
    double longitude = 6;
    double elevation = 7;
    double value = 8;
    bool high_alarm = 9;
    bool low_alarm = 10;
    bool simulated = 11;
    string simulation_uuid = 12;
    int32 simulation_transmit_sequence_number = 13;
    GranPrix gran_prix = 14;
    Track track = 15;
    Constructor constructor = 16;
    int32 car_number = 17;    
}

message TelemetryData {
    map<string, TelemetryDatum> telemetry_datum_map = 5;   
}

message AlarmAnalysisData {
    bool simulated = 1;
    google.protobuf.Timestamp date_range_begin = 2;
    google.protobuf.Timestamp date_range_end = 3;
    message AlarmCountsByConstructorAndCar {
        Constructor constructor = 1;
        int32 car_number = 2;
        int32 low_alarm_count = 3;
        int32 high_alarm_count = 4;
      }   
    repeated AlarmCountsByConstructorAndCar alarm_counts = 7;
}

message ConstructorAlarmAnalysisData {
    bool simulated = 1;
    google.protobuf.Timestamp date_range_begin = 2;
    google.protobuf.Timestamp date_range_end = 3;    
    Constructor constructor = 4;
    int32 car_number = 5;
    message AlarmCountsByDatumDescription {
        TelemetryDatumDescription datum_description = 1;
        int32 low_alarm_count = 2;
        int32 high_alarm_count = 3;
      }   
    repeated AlarmCountsByDatumDescription alarm_counts = 6;
}

message SystemStatusReport {
    TestResult telemetry_service_aliveness = 1;
    TestResult analysis_service_aliveness = 2;
    TestResult simulation_service_aliveness = 3;
    TestResult start_simulation = 4;
    TestResult poll_for_simulation_complete = 5;
    TestResult retrieve_simulation_data = 6;
    TestResult simulation_data_analysis = 7;  
}

message SimulationMember {
    string uuid = 1;
    string simulation_uuid = 2;
    Constructor constructor = 3;
    int32 car_number = 4;
    bool force_alarm = 5;
    bool no_alarms = 6;
}

message Simulation {
    string uuid = 1;
    int32 duration_in_minutes = 2;
    SampleRate sample_rate = 3;
    SimulationRateMultiplier simulation_rate_multiplier = 4;
    GranPrix gran_prix = 5;
    Track track = 6;
    map<string, SimulationMember> simulation_member_map = 7;
}

message SimulationInfo {
    string uuid = 1;
    int32 duration_in_minutes = 2;
    SampleRate sample_rate = 3;
    GranPrix gran_prix = 4;
    Track track = 5;
    SimulationState state = 6;
    google.protobuf.Timestamp start_timestamp = 7;
    google.protobuf.Timestamp end_timestamp = 8;
    double percent_complete = 9;
    string final_status_code = 10;
    string final_status_message = 11;
}

message AlivenessCheckRequest {
}

message AlivenessCheckResponse {
    ResponseDetails details = 1;
}

message TransmitTelemetryRequest {
    TelemetryData telemetry_data = 1;
}

message TransmitTelemetryResponse {
    map<string, ResponseDetails> details = 1;
}

message RunSimulationRequest {
    Simulation simulation = 1;
}

message RunSimulationResponse {
    ResponseDetails details = 1;
}

message GetSimulationInfoRequest {
    string simulation_uuid = 1;
}

message GetSimulationInfoResponse {
    ResponseDetails details = 1;
    SimulationInfo simulation_info = 2;
}

message GetTelemetryDataRequest {
    bool simulated = 1;
    string simulation_uuid = 2;
    google.protobuf.Timestamp date_range_begin = 3;
    google.protobuf.Timestamp date_range_end = 4;
    GranPrix gran_prix = 5;
    Track track = 6;
    Constructor constructor = 7;
    int32 car_number = 8;
    TelemetryDatumDescription datum_description = 9;
    message SearchBy {
        bool date_range = 1;
        bool constructor = 2;
        bool car_number = 3;
        bool datum_description = 4;
        bool gran_prix = 5;
        bool track = 6;
        bool high_alarm = 7;
        bool low_alarm = 8;
    }
    SearchBy search_by = 10;    
}

message GetTelemetryDataResponse {
    ResponseDetails details = 1;
    TelemetryData telemetry_data = 2;    
}

message GetAlarmAnalysisRequest {
    bool simulated = 1;       
    google.protobuf.Timestamp date_range_begin = 2;
    google.protobuf.Timestamp date_range_end = 3;
}

message GetAlarmAnalysisResponse {
    ResponseDetails details = 1;
    AlarmAnalysisData alarm_analysis_data = 2;    
}

message GetConstructorAlarmAnalysisRequest {
    google.protobuf.Timestamp date_range_begin = 1;
    google.protobuf.Timestamp date_range_end = 2;
    Constructor constructor = 3;
    int32 car_number = 4;
    bool simulated = 5;       
}

message GetConstructorAlarmAnalysisResponse {
    ResponseDetails details = 1;
    ConstructorAlarmAnalysisData constructor_alarm_analysis_data = 2;    
}

message GetSystemStatusRequest {
}

message GetSystemStatusResponse {
    ResponseDetails details = 1;
    SystemStatusReport system_status_report = 2;    
}

service TelemetryService {
    rpc AlivenessCheck (AlivenessCheckRequest) returns (AlivenessCheckResponse) {};
    rpc TransmitTelemetry (TransmitTelemetryRequest) returns (TransmitTelemetryResponse) {};
    rpc GetTelemetryData (GetTelemetryDataRequest) returns (GetTelemetryDataResponse) {};
}

service AnalysisService {
    rpc AlivenessCheck (AlivenessCheckRequest) returns (AlivenessCheckResponse) {};
    rpc GetAlarmAnalysis (GetAlarmAnalysisRequest) returns (GetAlarmAnalysisResponse) {};
    rpc GetConstructorAlarmAnalysis (GetConstructorAlarmAnalysisRequest) returns (GetConstructorAlarmAnalysisResponse) {};
}

service SimulationService {
    rpc AlivenessCheck (AlivenessCheckRequest) returns (AlivenessCheckResponse) {};
    rpc RunSimulation (RunSimulationRequest) returns (RunSimulationResponse) {};
    rpc GetSimulationInfo (GetSimulationInfoRequest) returns (GetSimulationInfoResponse) {};
}

service SystemStatusService {
    rpc GetSystemStatus (GetSystemStatusRequest) returns (GetSystemStatusResponse) {};
}
